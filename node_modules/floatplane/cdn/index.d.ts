import { Core } from "../Core";
import type { Options } from "got";
import { Client, Edge } from "../lib/types";
export declare type GotOptions = Options & {
    isStream: true;
};
export declare type DeliveryTypes = "live" | "vod" | "download";
export declare type DeliveryResponse = LiveDeliveryResponse | VodDeliveryResponse | DownloadDeliveryResponse;
export declare type QualityLevel = {
    name: string;
    width: number;
    height: number;
    label: string;
    order: number;
};
export declare type LiveDeliveryResponse = {
    cdn: string;
    strategy: string;
    resource: {
        uri: string;
        data: {
            token: string;
        };
    };
};
export declare type QualityLevelParam = {
    token: string;
};
export declare type VodDeliveryResponse = {
    cdn: string;
    strategy: string;
    resource: {
        uri: string;
        data: {
            qualityLevels: QualityLevel[];
            qualityLevelParams: Record<string, QualityLevelParam>;
        };
    };
};
export declare type DownloadDeliveryResponse = {
    client?: Client;
    edges: Edge[];
    strategy: string;
    resource: {
        uri: string;
        data: {
            qualityLevels: QualityLevel[];
            token: string;
        };
    };
};
export declare class CDN extends Core {
    endpoints: {
        url: string;
    };
    /**
     * Fetches resource information from cdn.
     * @param type Type of resource to fetch info for.
     * @param id ID of resource.
     */
    delivery(type: "live", creator: string): Promise<LiveDeliveryResponse>;
    delivery(type: "vod", guid: string): Promise<VodDeliveryResponse>;
    delivery(type: "download", guid: string): Promise<DownloadDeliveryResponse>;
}
//# sourceMappingURL=index.d.ts.map