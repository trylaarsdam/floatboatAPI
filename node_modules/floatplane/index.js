"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Floatplane = exports.headers = void 0;
const got_1 = __importDefault(require("got"));
const tough_cookie_1 = require("tough-cookie");
const auth_1 = require("./auth");
const user_1 = require("./user");
const api_1 = require("./api");
const creator_1 = require("./creator");
const cdn_1 = require("./cdn");
// Shitty fix now that im using these headers in tests
let version;
try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    version = require("./package.json").version;
}
catch {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    version = require("../package.json").version;
}
exports.headers = {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    "User-Agent": `FloatplaneAPI/${version} (Inrix, +https://github.com/Inrixia/floatplaneAPI.ts), CFNetwork`,
    accept: "application/json",
    connection: "keep-alive",
};
class Floatplane {
    got;
    auth;
    user;
    api;
    creator;
    cdn;
    constructor(cookieJar) {
        cookieJar ??= new tough_cookie_1.CookieJar();
        this.got = got_1.default.extend({
            // Sets the global requestMethod to be used, this maintains headers
            cookieJar,
            headers: exports.headers,
        });
        this.auth = new auth_1.Auth(this.got);
        this.user = new user_1.User(this.got);
        this.api = new api_1.Api(this.got);
        this.creator = new creator_1.Creator(this.got);
        this.cdn = new cdn_1.CDN(this.got);
    }
    /**
     * Login to floatplane so future requests are authenticated
     * @param {LoginOptions} options Login options
     * @param {string} options.username Username
     * @param {string} options.password Password
     * @param {string} options.captchaToken Recaptcha token (single use). Not required
     * @param {string} options.token 2 Factor Authentication token (single use)
     * @returns {Promise<LoginSuccess>} User object.
     *
     * @example
     * // captchaToken is not required for login.
     * // Get a single use captchaToken by going to floatplane.com/login and running
     * grecaptcha.execute('6LfwnJ0aAAAAANTkEF2M1LfdKx2OpWAxPtiHISqr', { action:'login' }).then(console.log)
     * // in console.
     */
    login = async (options) => {
        if (typeof options.username !== "string")
            throw new Error("Username must be a string!");
        if (typeof options.password !== "string")
            throw new Error("Password must be a string!");
        if (typeof options.captchaToken !== "string" && options.captchaToken !== undefined)
            throw new Error("Recaptcha Token must be a string or undefined!");
        let result = await this.auth.login(options.username, options.password, options.captchaToken);
        if (result.needs2FA === true) {
            if (typeof options.token !== "string")
                throw new Error("2FA Token must be a string!");
            result = await this.auth.factor(options.token);
        }
        return result;
    };
    /**
     * Returns true if authenticated or Error if not.
     */
    isAuthenticated = async () => this.user
        .self()
        .then(() => true)
        .catch((err) => err);
}
exports.Floatplane = Floatplane;
//# sourceMappingURL=index.js.map