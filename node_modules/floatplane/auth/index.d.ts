import { Core } from "../Core";
import type { Image } from "../lib/types";
export declare type LoginSuccess = {
    user: {
        id: string;
        username: string;
        profileImage: Image;
    };
    needs2FA: false;
};
export declare type Needs2FA = {
    needs2FA: true;
};
export declare type LoginResponse = Promise<LoginSuccess | Needs2FA>;
export declare class Auth extends Core {
    endpoints: {
        login: string;
        factor: string;
    };
    /**
     * Login to floatplane using provided credentials.
     * @param {string} username Username/Email
     * @param {string} password Password
     * @param {string} captchaToken Recaptcha token (single use). Not required.
     * @returns {LoginResponse} User object OR `{ needs2FA: true }` if user requires 2 Factor authentication.
     *
     * @example
     * // captchaToken is not required for login.
     * // Get a single use captchaToken by going to floatplane.com/login and running
     * grecaptcha.execute('6LfwnJ0aAAAAANTkEF2M1LfdKx2OpWAxPtiHISqr', { action:'login' }).then(console.log)
     * // in console.
     */
    login: (username: string, password: string, captchaToken?: string | undefined) => Promise<LoginResponse>;
    /**
     * Login using provided 2Factor token.
     * @param {string} token 2 Factor Authentication token (single use)
     * @returns {Promise<User>} User object
     */
    factor: (token: string) => Promise<LoginSuccess>;
}
//# sourceMappingURL=index.d.ts.map