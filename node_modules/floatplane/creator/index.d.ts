import { Core } from "../Core";
import type { CreatorObj, Image, Metadata } from "../lib/types";
export declare type BlogPost = {
    id: string;
    guid: string;
    title: string;
    tags: string[];
    text: string;
    type: string;
    attachmentOrder: string[];
    metadata: Metadata;
    releaseDate: string;
    likes: number;
    dislikes: number;
    score: number;
    comments: number;
    creator: CreatorObj;
    thumbnail: Image;
    isAccessible: boolean;
    videoAttachments: string[];
    audioAttachments: string[];
    pictureAttachments: string[];
    galleryAttachments: string[];
    wasReleasedSilently: boolean;
};
export declare class Creator extends Core {
    endpoints: {
        videos: string;
    };
    /**
     * Fetch blogPosts from a creator, returns a Async Iterator.
     * @param creatorGUID Creator GUID to fetch content for.
     * @param options.type Filter BlogPosts by attachment types. Can be "audio", "video", "picture" or "gallery".
     * @param options.sort Sort by releaseDate. Can be "DESC" or "ASC".
     * @param options.search Filter BlogPosts by search term.
     * @returns {AsyncIterable<BlogPost>} Async iterable that yeilds blogPost objects
     */
    blogPostsIterable(creatorGUID: string, options?: {
        type?: "audio" | "video" | "picture" | "gallery";
        sort?: "ASC" | "DESC";
        search?: string;
    }): AsyncIterableIterator<BlogPost>;
    /**
     * Fetch blogPosts from a creator.
     * @param creatorGUID Creator GUID to fetch content for.
     * @param options.fetchAfter Number of videos from the latest to fetch from.
     * @param options.type Filter BlogPosts by attachment types. Can be "audio", "video", "picture" or "gallery".
     * @param options.sort Sort by releaseDate. Can be "DESC" or "ASC".
     * @param options.search Filter BlogPosts by search term.
     * @param options.limit Max amount of BlogPosts to return. Must be in range 1-20.
     * @returns {Promise<BlogPost[]>}
     */
    blogPosts: (creatorGUID: string, options?: {
        fetchAfter?: number | undefined;
        type?: "audio" | "video" | "picture" | "gallery" | undefined;
        sort?: "ASC" | "DESC" | undefined;
        search?: string | undefined;
        limit?: number | undefined;
    } | undefined) => Promise<BlogPost[]>;
}
//# sourceMappingURL=index.d.ts.map