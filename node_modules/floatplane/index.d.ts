import got from "got";
import { CookieJar } from "tough-cookie";
import { Auth } from "./auth";
import { User } from "./user";
import { Api } from "./api";
import { Creator } from "./creator";
import { CDN } from "./cdn";
import type { LoginSuccess } from "./auth";
export declare type LoginOptions = {
    username: string;
    password: string;
    captchaToken?: string;
    token?: string;
};
export declare const headers: {
    "User-Agent": string;
    accept: string;
    connection: string;
};
export declare class Floatplane {
    got: typeof got;
    auth: Auth;
    user: User;
    api: Api;
    creator: Creator;
    cdn: CDN;
    constructor(cookieJar?: CookieJar);
    /**
     * Login to floatplane so future requests are authenticated
     * @param {LoginOptions} options Login options
     * @param {string} options.username Username
     * @param {string} options.password Password
     * @param {string} options.captchaToken Recaptcha token (single use). Not required
     * @param {string} options.token 2 Factor Authentication token (single use)
     * @returns {Promise<LoginSuccess>} User object.
     *
     * @example
     * // captchaToken is not required for login.
     * // Get a single use captchaToken by going to floatplane.com/login and running
     * grecaptcha.execute('6LfwnJ0aAAAAANTkEF2M1LfdKx2OpWAxPtiHISqr', { action:'login' }).then(console.log)
     * // in console.
     */
    login: (options: LoginOptions) => Promise<LoginSuccess>;
    /**
     * Returns true if authenticated or Error if not.
     */
    isAuthenticated: () => Promise<Error | true>;
}
//# sourceMappingURL=index.d.ts.map